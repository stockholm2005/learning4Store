/** * @author kent hao */var Util = require('Util');var delegate = require('backend/Delegate');var Geo = require('GeoLocation');var PartyRow = require('ui/Party');var Lines = require('ui/Lines');var Zookee = require('Zookee');var delegate = require('backend/Delegate');var voiceDelegate = require('backend/VoiceDelegate');var DetailParty = require('ui/DetailParty');function PartyPad() {	var location;	var currentAudioView = {};	var lastDistance = 0;	var hasMore = true;	var user = Zookee.User.CurrentUser	var data = [];	this.isAdded = false;	this.isLoading = false;	this.view = Ti.UI.createView({		top : 0,		bottom : 0,		left : 0,		right : 0		//backgroundColor : 'white'	});	var tableView = Ti.UI.createTableView({		data : data,		top : 0,		//bottom:0,		left : 0,		right : 0,		allowsSelection : false,		separatorColor : 'transparent',		// separatorStyle : Ti.UI.iPhone.TableViewSeparatorStyle.SINGLE_LINE,		bubbleParent : false,		backgroundColor : 'transparent',		showVerticalScrollIndicator : false	});	if (!Zookee.isAndroid) {		tableView.allowsSelection = true;	}	var that = this;	var loadMore = function() {		that.isLoading = true;		delegate.queryParty(function(posts) {			if (posts.length < Zookee.MaxLoadingRows) {				hasMore = false;			}			for (var i = 0; i < posts.length; i++) {				var postRow = new PartyRow(posts[i], that, false, location);				//data.push(postRow);				tableView.appendRow(postRow);			}			that.isLoading = false;		}, function() {			that.isLoading = false;		}, [location.longitude, location.latitude]);	}	tableView.addEventListener('scroll', function(e) {		// no more parties		if (!tableView.data[0])			return;		if (!hasMore)			return;		if (!Zookee.isAndroid) {			var offset = e.contentOffset.y;			var height = e.size.height;			var total = offset + height;			var theEnd = e.contentSize.height;			var distance = theEnd - total;			// going down is the only time we dynamically load,			// going up we can safely ignore -- note here that			// the values will be negative so we do the opposite			if (distance < lastDistance) {				// adjust the % of rows scrolled before we decide to start fetching				var nearEnd = theEnd * .75;				if (!that.isLoading && (total >= nearEnd)) {					loadMore();				}			}			lastDistance = distance;		} else {			if (!that.isLoading && e.firstVisibleItem > tableView.data[0].rows.length - 4) {				loadMore();			}		}	})	tableView.addEventListener('click', function(e) {	})	this.addPost = function(post) {		if (!that.tableViewLoaded) {			that.view.remove(noPartyLabel);			that.view.add(tableView);			that.tableViewLoaded = true;		}		var postRow = new PartyRow(post, that, false, location);		tableView.insertRowBefore(0, postRow);	}	this.addComment = function(e) {		var index = e.index;		var postRow = new PartyRow(e.post, that, false, location);		//postRow.view.add(Util.emptySpace('white', 30));		tableView.updateRow(index, postRow);	}	this.addPhoto = function(e) {		var postRow = new PartyRow(e.post, that, e.move2Last, location);		//postRow.view.add(Util.emptySpace('white', 30));		tableView.updateRow(e.index, postRow);	}	this.refresh = function() {		if (that.isLoading)			return;		that.isLoading = true;		var getParty = function(_location) {			location = _location;			var user = Zookee.User.CurrentUser			if (Util.handleOffLine(that.view))				return;			var actInd;			if (that.isAdded) {				actInd = Util.actIndicator('', that.view, true);			} else {				actInd = Util.actIndicator('', that.view, false, Ti.UI.iPhone.ActivityIndicatorStyle.DARK);			}			that.view.remove(noPartyLabel);			actInd.show();			delegate.setPartyPage(1);			// get party list			delegate.queryParty(function(parties) {				if (parties.length < Zookee.MaxLoadingRows)					hasMore = false;				populateTable(parties);				actInd.hide();				that.isAdded = true;				that.isLoading = false;			}, function() {				actInd.hide();				that.isLoading = false;			}, [_location.longitude, _location.latitude]);		}		Geo.getLocation(getParty);	};	var noPartyLabel = Ti.UI.createLabel({		textid : 'no_parties',		font : Zookee.FONT.NORMAL_FONT	});	var populateTable = function(parties) {		// for (var i = 0; i < data.length; i++) {		// data[i].release();		// data[i] = null;		// }		if (parties.length > 0) {			that.view.remove(noPartyLabel);			that.view.add(tableView);			that.tableViewLoaded = true;			data = [];			for (var i = 0; i < parties.length; i++) {				var party = parties[i];				var partyRow = new PartyRow(party, that, false, location);				data.push(partyRow);			}			tableView.setData(data);		} else {			that.view.remove(tableView);			that.view.add(noPartyLabel);			that.tableViewLoaded = false;		}	};	var getClassName = function(party) {		return party.id;	}};exports.PartyPad = PartyPad; 