/** * @author kent hao */var Util = require('Util');var delegate = require('backend/Delegate');var Geo = require('GeoLocation');var PartyRow = require('ui/Party');var Lines = require('ui/Lines');var Zookee = require('Zookee');var delegate = require('backend/Delegate');function PartyPad() {	var that = this;	var location;	var currentAudioView = {};	var lastDistance = 0;	var hasMore = true;	var user = Zookee.User.CurrentUser	var data = [];	var data_bak = [];	this.isAdded = false;	this.isLoading = false;	this.view = Ti.UI.createView({		top : 0,		width:Ti.UI.FILL,		bottom:0		//backgroundColor : 'white'	});	var searchBar = Ti.UI.createSearchBar({		top:0,		showCancel:true,		height:Zookee[50]	})	searchBar.addEventListener('return',function(e){		if (Zookee.isAndroid) {        // hiding and showing the search bar forces it back to its non-focused appearance.        		searchBar.hide();        		searchBar.show();    		}else{			searchBar.blur();		}		that.refresh(searchBar.value);	});	searchBar.addEventListener('cancel',function(e){		tableView.setData(data_bak);		searchBar.blur();	})	this.view.add(searchBar);	var tableView = Ti.UI.createTableView({		data : data,		top : Zookee[60],		//bottom:0,		left : 0,		right : 0,		allowsSelection : false,		//separatorColor : 'transparent',		separatorStyle : Ti.UI.iPhone.TableViewSeparatorStyle.SINGLE_LINE,		bubbleParent : false,		backgroundColor : 'transparent',		showVerticalScrollIndicator : false	});	if (!Zookee.isAndroid) {		tableView.allowsSelection = true;	}	var loadMore = function() {		that.isLoading = true;		delegate.queryParty(function(posts) {			if (posts.length < Zookee.MaxLoadingRows) {				hasMore = false;			}			for (var i = 0; i < posts.length; i++) {				var postRow = new PartyRow(posts[i], that, false, location);				//data.push(postRow);				tableView.appendRow(postRow);			}			that.isLoading = false;		}, function() {			that.isLoading = false;		}, [location.longitude, location.latitude]);	}	tableView.addEventListener('scroll', function(e) {		// no more parties		if (!tableView.data[0])			return;		if (!hasMore)			return;		if (!Zookee.isAndroid) {			var offset = e.contentOffset.y;			var height = e.size.height;			var total = offset + height;			var theEnd = e.contentSize.height;			var distance = theEnd - total;			// going down is the only time we dynamically load,			// going up we can safely ignore -- note here that			// the values will be negative so we do the opposite			if (distance < lastDistance) {				// adjust the % of rows scrolled before we decide to start fetching				var nearEnd = theEnd * .75;				if (!that.isLoading && (total >= nearEnd)) {					loadMore();				}			}			lastDistance = distance;		} else {			if (!that.isLoading && e.firstVisibleItem > tableView.data[0].rows.length - 8) {				loadMore();			}		}	})	tableView.addEventListener('click', function(e) {		if (e.source.tag == 'send') {			var pre_ads = Ti.App.Properties.getList('pre_ads');			if(!pre_ads || pre_ads.length == 0){				Util.showStatus(L('no_pre_ads','no pre-defined ads'));				return;			}			var parent = e.source.bg;			var actInd = Util.actIndicator('', parent, false, Zookee.isAndroid ? Ti.UI.ActivityIndicatorStyle.DARK : Ti.UI.iPhone.ActivityIndicatorStyle.DARK);			parent.remove(e.source);			actInd.show();			var obj = {				title : pre_ads[0].title,				content : pre_ads[0].content,				location : [location.longitude, location.latitude],				address : 'No.1068 Westin Road, Bali',				photo:pre_ads[0].photo			};			//obj[Zookee.ImageSize.THUMB] = thumbSizeStr;			delegate.createAd(obj, [e.source.party], function() {				Zookee.sentParties.push(e.source.party.id)				actInd.hide();				parent.add(Ti.UI.createLabel({					text : L('ads_sent', 'ads sent'),					color : Zookee.UI.COLOR.PARTY_CONTENT,					font : Zookee.FONT.NORMAL_FONT_ITALIC				}));				e.row.className = 'label';			}, function() {				actInd.hide();				parent.add(e.source);			})		}	})	this.addPost = function(post) {		if (!that.tableViewLoaded) {			that.view.remove(noPartyLabel);			that.view.add(tableView);			that.tableViewLoaded = true;		}		var postRow = new PartyRow(post, that, false, location);		tableView.insertRowBefore(0, postRow);	}	this.refresh = function(partyType) {		if (that.isLoading)			return;		var getParty = function(_location) {			location = _location;			var user = Zookee.User.CurrentUser			if (Util.handleOffLine(that.view))				return;			var actInd = Util.actIndicator('', that.view,false,Zookee.isAndroid?Ti.UI.ActivityIndicatorStyle.DARK:Ti.UI.iPhone.ActivityIndicatorStyle.DARK);			that.view.remove(noPartyLabel);			actInd.show();			that.isLoading = true;			delegate.setPartyPage(1);			// get party list			delegate.queryParty(function(parties) {				if (parties.length < Zookee.MaxLoadingRows)					hasMore = false;				populateTable(parties);				actInd.hide();				that.isAdded = true;				that.isLoading = false;			}, function() {				actInd.hide();				that.isLoading = false;			}, [_location.longitude, _location.latitude],partyType);		}		Geo.getLocation(getParty);	};	var noPartyLabel = Ti.UI.createLabel({		textid : 'no_parties',		font : Zookee.FONT.NORMAL_FONT	});	var populateTable = function(parties) {		if (parties.length > 0) {			that.view.remove(noPartyLabel);			if(!that.isAdded)				that.view.add(tableView);			that.tableViewLoaded = true;			data = [];			for (var i = 0; i < parties.length; i++) {				if(!Util.isPartyHappening(parties[i])) continue;				//you can not send ads to one single person.				if(parties[i].attenders.length==1) continue;				var party = parties[i];				var partyRow = new PartyRow(party, that, false, location);				data.push(partyRow);			}			if(data.length < Zookee.MaxLoadingRows)				hasMore = false;			tableView.setData(data);			if(data_bak.length==0)				data_bak = [].concat(data);		} else {			that.view.remove(tableView);			that.view.add(noPartyLabel);			that.tableViewLoaded = false;		}	};	var getClassName = function(party) {		return party.id;	}};exports.PartyPad = PartyPad;